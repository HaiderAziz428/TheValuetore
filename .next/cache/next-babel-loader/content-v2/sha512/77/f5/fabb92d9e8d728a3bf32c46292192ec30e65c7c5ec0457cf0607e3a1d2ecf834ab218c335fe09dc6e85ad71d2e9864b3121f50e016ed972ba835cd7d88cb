{"ast":null,"code":"import _extends from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/components/admin/Widget/Widget.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { UncontrolledTooltip } from \"reactstrap\";\nimport s from \"./Widget.module.scss\";\nimport classNames from \"classnames\";\nimport Loader from \"../Loader\"; // eslint-disable-line\n\nimport AnimateHeight from \"react-animate-height\";\nimport uuidv4 from \"uuid/v4\";\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nvar Widget = /*#__PURE__*/function (_React$Component) {\n  _inherits(Widget, _React$Component);\n\n  var _super = _createSuper(Widget);\n\n  function Widget(props) {\n    var _this;\n\n    _classCallCheck(this, Widget);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleModal\", function () {\n      _this.setState({\n        modal: !_this.state.modal\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function () {\n      _this.setState({\n        hideWidget: !_this.state.hideWidget\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCollapse\", function () {\n      var heightValue = _this.state.collapseWidget ? \"auto\" : 0;\n\n      _this.setState({\n        height: heightValue,\n        collapseWidget: !_this.state.collapseWidget,\n        reloading: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeWithModal\", function () {\n      _this.toggleModal();\n\n      _this.handleClose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleExpand\", function () {\n      _this.setState({\n        height: \"auto\",\n        collapseWidget: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReload\", function () {\n      var _this$props = _this.props,\n          widgetType = _this$props.widgetType,\n          updateWidgetData = _this$props.updateWidgetData;\n      var type = widgetType;\n\n      if (type) {\n        updateWidgetData(type);\n      }\n\n      _this.setState({\n        reloading: true\n      });\n\n      var endpoint = false;\n\n      if (!endpoint) {\n        setTimeout(function () {\n          return _this.setState({\n            reloading: false\n          });\n        }, 2000);\n      } else {\n        _this.setState({\n          reloading: true\n        });\n\n        fetch(\"https://yourapi.com\").then(function (response) {\n          return response.json();\n        }).then(function (json) {\n          return _this.setState({\n            apiData: json.title\n          });\n        }).then(setTimeout(function () {\n          return _this.setState({\n            reloading: false\n          });\n        }, 1000));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFullscreen\", function () {\n      _this.setState({\n        fullscreened: !_this.state.fullscreened\n      });\n    });\n\n    _this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height: props.collapsed ? 0 : \"auto\",\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Widget, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          title = _this$props2.title,\n          className = _this$props2.className,\n          children = _this$props2.children,\n          close = _this$props2.close,\n          fullscreen = _this$props2.fullscreen,\n          collapse = _this$props2.collapse,\n          refresh = _this$props2.refresh,\n          settings = _this$props2.settings,\n          settingsInverse = _this$props2.settingsInverse,\n          tooltipPlacement = _this$props2.tooltipPlacement,\n          showTooltip = _this$props2.showTooltip,\n          bodyClass = _this$props2.bodyClass,\n          customControls = _this$props2.customControls,\n          customClose = _this$props2.customClose,\n          customExpand = _this$props2.customExpand,\n          customCollapse = _this$props2.customCollapse,\n          customFullscreen = _this$props2.customFullscreen,\n          customReload = _this$props2.customReload,\n          fetchingData = _this$props2.fetchingData,\n          customDropDown = _this$props2.customDropDown,\n          customBody = _this$props2.customBody,\n          prompt = _this$props2.prompt,\n          collapsed = _this$props2.collapsed,\n          widgetType = _this$props2.widgetType,\n          updateWidgetData = _this$props2.updateWidgetData,\n          options = _this$props2.options,\n          attributes = _objectWithoutProperties(_this$props2, [\"title\", \"className\", \"children\", \"close\", \"fullscreen\", \"collapse\", \"refresh\", \"settings\", \"settingsInverse\", \"tooltipPlacement\", \"showTooltip\", \"bodyClass\", \"customControls\", \"customClose\", \"customExpand\", \"customCollapse\", \"customFullscreen\", \"customReload\", \"fetchingData\", \"customDropDown\", \"customBody\", \"prompt\", \"collapsed\", \"widgetType\", \"updateWidgetData\", \"options\"]);\n\n      var mainControls = !!(close || fullscreen || collapse || refresh || settings || settingsInverse);\n      var _this$state = this.state,\n          reloading = _this$state.reloading,\n          fullscreened = _this$state.fullscreened,\n          randomId = _this$state.randomId,\n          height = _this$state.height,\n          hideWidget = _this$state.hideWidget,\n          collapseWidget = _this$state.collapseWidget,\n          modal = _this$state.modal;\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 7\n        }\n      }, __jsx(\"section\", _extends({\n        style: {\n          display: hideWidget ? \"none\" : \"\"\n        },\n        className: classNames(\"widget\", {\n          fullscreened: !!fullscreened,\n          collapsed: !!collapseWidget\n        }, s.widget, className, reloading || fetchingData ? s.reloading : \"\")\n      }, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }\n      }), title && (typeof title === \"string\" ? __jsx(\"h5\", {\n        className: s.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }\n      }, title) : __jsx(\"header\", {\n        className: s.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }\n      }, title)), !customControls && mainControls && __jsx(\"div\", {\n        className: \"\".concat(s.widgetControls, \" widget-controls\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, settings && __jsx(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        className: \"la la-cog\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 19\n        }\n      })), settingsInverse && __jsx(\"button\", {\n        className: \"bg-gray-transparent \".concat(s.inverse),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        className: \"la la-cog text-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 19\n        }\n      })), refresh && __jsx(\"button\", {\n        onClick: this.handleReload,\n        id: \"reloadId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }\n      }, typeof refresh === \"string\" ? __jsx(\"strong\", {\n        className: \"text-gray-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }\n      }, refresh) : __jsx(\"i\", {\n        className: \"la la-refresh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }\n      }), showTooltip && __jsx(UncontrolledTooltip, {\n        placement: tooltipPlacement,\n        target: \"reloadId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }\n      }, \"Reload\")), fullscreen && __jsx(\"button\", {\n        onClick: this.handleFullscreen,\n        id: \"fullscreenId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        className: \"la la-\".concat(fullscreened ? \"compress\" : \"expand\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 19\n        }\n      }), showTooltip && __jsx(UncontrolledTooltip, {\n        placement: tooltipPlacement,\n        target: \"fullscreenId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      }, \"Fullscreen\")), !fullscreened && collapse && __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }, __jsx(\"button\", {\n        onClick: this.handleCollapse,\n        id: \"collapseId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 19\n        }\n      }, __jsx(\"i\", {\n        className: \"la la-angle-\".concat(!collapseWidget ? \"down\" : \"up\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }\n      }), showTooltip && __jsx(UncontrolledTooltip, {\n        placement: tooltipPlacement,\n        target: \"collapseId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 23\n        }\n      }, \"Collapse\"))), !fullscreened && (close && !prompt ? __jsx(\"button\", {\n        onClick: this.handleClose,\n        id: \"closeId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 19\n        }\n      }, typeof close === \"string\" ? __jsx(\"strong\", {\n        className: \"text-gray-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 23\n        }\n      }, close) : __jsx(\"i\", {\n        className: \"la la-remove\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 23\n        }\n      }), showTooltip && __jsx(UncontrolledTooltip, {\n        placement: tooltipPlacement,\n        target: \"closeId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 23\n        }\n      }, \"Close\")) : __jsx(\"button\", {\n        onClick: this.toggleModal,\n        id: \"closeId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 19\n        }\n      }, typeof close === \"string\" ? __jsx(\"strong\", {\n        className: \"text-gray-light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 23\n        }\n      }, close) : __jsx(\"i\", {\n        className: \"la la-remove\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 23\n        }\n      }), showTooltip && __jsx(UncontrolledTooltip, {\n        placement: tooltipPlacement,\n        target: \"closeId-\".concat(randomId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 23\n        }\n      }, \"Modal\")))), customDropDown && __jsx(\"div\", {\n        className: \"\".concat(s.widgetControls, \" widget-controls\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }\n      }, __jsx(UncontrolledDropdown, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }\n      }, __jsx(DropdownToggle, {\n        tag: \"span\",\n        \"data-toggle\": \"dropdown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        className: \"la la-cog\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 19\n        }\n      })), __jsx(DropdownMenu, {\n        className: \"bg-widget-transparent\",\n        right: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }\n      }, __jsx(DropdownItem, {\n        onClick: this.handleReload,\n        title: \"Reload\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 19\n        }\n      }, \"Reload \\xA0\\xA0\", __jsx(\"span\", {\n        className: \"badge badge-pill badge-success animated bounceIn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 23\n        }\n      }, \"9\"))), __jsx(DropdownItem, {\n        onClick: this.handleFullscreen,\n        title: !fullscreened ? \"Full Screen\" : \"Restore\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 19\n        }\n      }, !fullscreened ? \"Fullscreen\" : \"Restore\", \" \"), __jsx(DropdownItem, {\n        divider: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 19\n        }\n      }), !fullscreened && (!prompt ? __jsx(DropdownItem, {\n        onClick: this.handleClose,\n        title: \"Close\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 23\n        }\n      }, \"Close\") : __jsx(DropdownItem, {\n        onClick: this.toggleModal,\n        title: \"Close\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 23\n        }\n      }, \"Close\"))))), customControls && __jsx(\"div\", {\n        className: \"\".concat(s.widgetControls, \" widget-controls\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }\n      }, !fullscreened && (customClose && !prompt ? __jsx(\"button\", {\n        onClick: this.handleClose,\n        id: \"closeId-\".concat(randomId),\n        className: s.customControlItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 19\n        }\n      }, __jsx(\"i\", {\n        title: \"Close\",\n        className: \"la la-times\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }\n      })) : __jsx(\"button\", {\n        onClick: this.toggleModal,\n        id: \"closeId-\".concat(randomId),\n        className: s.customControlItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 19\n        }\n      }, __jsx(\"i\", {\n        title: \"Close\",\n        className: \"la la-times\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }\n      }))), !fullscreened && customCollapse && __jsx(\"button\", {\n        onClick: this.handleCollapse,\n        id: \"closeId-\".concat(randomId),\n        className: s.customControlItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        title: \"Collapse\",\n        className: \"la la-angle-\".concat(!collapseWidget ? \"down\" : \"up\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 19\n        }\n      })), customFullscreen && __jsx(\"button\", {\n        onClick: this.handleFullscreen,\n        id: \"closeId-\".concat(randomId),\n        className: s.customControlItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        title: \"Fullscreen\",\n        className: \"la la-\".concat(fullscreened ? \"compress\" : \"expand\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 19\n        }\n      })), customReload && __jsx(\"button\", {\n        onClick: this.handleReload,\n        id: \"closeId-\".concat(randomId),\n        className: s.customControlItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 17\n        }\n      }, __jsx(\"i\", {\n        title: \"I am spinning!\",\n        className: \"la la-refresh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 19\n        }\n      }))), __jsx(AnimateHeight, {\n        duration: 500,\n        height: height,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"\".concat(s.widgetBody, \" widget-body \").concat(bodyClass),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }\n      }, reloading || fetchingData ? __jsx(Loader, {\n        className: s.widgetLoader,\n        size: 40,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }\n      }) : customBody ? __jsx(\"div\", {\n        className: \"jumbotron handle bg-inverse text-white mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 19\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }\n      }, \"Draggable story!\"), __jsx(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 21\n        }\n      }, __jsx(\"em\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 23\n        }\n      }, \"Build\"), \" your own interfaces! Sit back and relax.\"), __jsx(\"p\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 21\n        }\n      }, __jsx(\"button\", {\n        onClick: this.handleFullscreen,\n        className: \"btn btn-danger btn-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 23\n        }\n      }, !fullscreened ? __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 27\n        }\n      }, \"Fullscreen me! \\xA0\", __jsx(\"i\", {\n        className: \"la la-check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 29\n        }\n      })) : \"Go Back\")))) : children))), prompt && __jsx(Modal, {\n        isOpen: modal,\n        toggle: this.toggleModal,\n        id: \"news-close-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }\n      }, __jsx(ModalHeader, {\n        toggle: this.toggleModal,\n        id: \"news-close-modal-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }\n      }, \"Sure?\"), __jsx(ModalBody, {\n        className: \"bg-white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }\n      }, \"Do you really want to unrevertably remove this super news widget?\"), __jsx(ModalFooter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        color: \"default\",\n        onClick: this.toggleModal,\n        \"data-dismiss\": \"modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 15\n        }\n      }, \"No\"), \" \", __jsx(Button, {\n        color: \"danger\",\n        onClick: this.closeWithModal,\n        id: \"news-widget-remove\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 15\n        }\n      }, \"Yes, remove widget\"))), __jsx(\"div\", {\n        style: {\n          display: fullscreened ? \"block\" : \"none\"\n        },\n        className: s.widgetBackground,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Widget;\n}(React.Component);\n\n_defineProperty(Widget, \"propTypes\", {\n  title: PropTypes.node,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  fullscreen: PropTypes.bool,\n  collapse: PropTypes.bool,\n  refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  settings: PropTypes.bool,\n  settingsInverse: PropTypes.bool,\n  tooltipPlacement: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  bodyClass: PropTypes.string,\n  customControls: PropTypes.bool,\n  options: PropTypes.object,\n  //eslint-disable-line,\n  fetchingData: PropTypes.bool\n});\n\n_defineProperty(Widget, \"defaultProps\", {\n  title: null,\n  className: \"\",\n  children: [],\n  close: false,\n  fullscreen: false,\n  collapse: false,\n  refresh: false,\n  settings: false,\n  settingsInverse: false,\n  tooltipPlacement: \"bottom\",\n  showTooltip: false,\n  bodyClass: \"\",\n  customControls: false,\n  customClose: null,\n  customExpand: null,\n  customCollapse: null,\n  customFullscreen: null,\n  customReload: null,\n  customDropDown: null,\n  prompt: false,\n  collapsed: false,\n  options: {},\n  fetchingData: false,\n  widgetType: \"\"\n});\n\nexport default Widget;","map":{"version":3,"sources":["/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/components/admin/Widget/Widget.js"],"names":["React","PropTypes","UncontrolledTooltip","s","classNames","Loader","AnimateHeight","uuidv4","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Button","Modal","ModalHeader","ModalBody","ModalFooter","Widget","props","setState","modal","state","hideWidget","heightValue","collapseWidget","height","reloading","toggleModal","handleClose","widgetType","updateWidgetData","type","endpoint","setTimeout","fetch","then","response","json","apiData","title","fullscreened","randomId","collapsed","className","children","close","fullscreen","collapse","refresh","settings","settingsInverse","tooltipPlacement","showTooltip","bodyClass","customControls","customClose","customExpand","customCollapse","customFullscreen","customReload","fetchingData","customDropDown","customBody","prompt","options","attributes","mainControls","display","widget","widgetControls","inverse","handleReload","handleFullscreen","handleCollapse","customControlItem","widgetBody","widgetLoader","closeWithModal","widgetBackground","Component","node","string","oneOfType","arrayOf","bool","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { UncontrolledTooltip } from \"reactstrap\";\nimport s from \"./Widget.module.scss\";\nimport classNames from \"classnames\";\nimport Loader from \"../Loader\"; // eslint-disable-line\nimport AnimateHeight from \"react-animate-height\";\nimport uuidv4 from \"uuid/v4\";\nimport {\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from \"reactstrap\";\n\nclass Widget extends React.Component {\n  static propTypes = {\n    title: PropTypes.node,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]),\n    close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    fullscreen: PropTypes.bool,\n    collapse: PropTypes.bool,\n    refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    settings: PropTypes.bool,\n    settingsInverse: PropTypes.bool,\n    tooltipPlacement: PropTypes.string,\n    showTooltip: PropTypes.bool,\n    bodyClass: PropTypes.string,\n    customControls: PropTypes.bool,\n    options: PropTypes.object, //eslint-disable-line,\n    fetchingData: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    title: null,\n    className: \"\",\n    children: [],\n    close: false,\n    fullscreen: false,\n    collapse: false,\n    refresh: false,\n    settings: false,\n    settingsInverse: false,\n    tooltipPlacement: \"bottom\",\n    showTooltip: false,\n    bodyClass: \"\",\n    customControls: false,\n    customClose: null,\n    customExpand: null,\n    customCollapse: null,\n    customFullscreen: null,\n    customReload: null,\n    customDropDown: null,\n    prompt: false,\n    collapsed: false,\n    options: {},\n    fetchingData: false,\n    widgetType: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height: props.collapsed ? 0 : \"auto\",\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: \"\",\n    };\n  }\n\n  toggleModal = () => {\n    this.setState({ modal: !this.state.modal });\n  };\n\n  handleClose = () => {\n    this.setState({ hideWidget: !this.state.hideWidget });\n  };\n\n  handleCollapse = () => {\n    let heightValue = this.state.collapseWidget ? \"auto\" : 0;\n    this.setState({\n      height: heightValue,\n      collapseWidget: !this.state.collapseWidget,\n      reloading: false,\n    });\n  };\n\n  closeWithModal = () => {\n    this.toggleModal();\n    this.handleClose();\n  };\n\n  handleExpand = () => {\n    this.setState({\n      height: \"auto\",\n      collapseWidget: false,\n    });\n  };\n\n  handleReload = () => {\n    const { widgetType, updateWidgetData } = this.props;\n    const type = widgetType;\n    if (type) {\n      updateWidgetData(type);\n    }\n    this.setState({ reloading: true });\n    let endpoint = false;\n    if (!endpoint) {\n      setTimeout(() => this.setState({ reloading: false }), 2000);\n    } else {\n      this.setState({ reloading: true });\n      fetch(\"https://yourapi.com\")\n        .then((response) => response.json())\n        .then((json) => this.setState({ apiData: json.title }))\n        .then(setTimeout(() => this.setState({ reloading: false }), 1000));\n    }\n  };\n\n  handleFullscreen = () => {\n    this.setState({ fullscreened: !this.state.fullscreened });\n  };\n\n  render() {\n    const {\n      title,\n      className,\n      children,\n      close,\n      fullscreen,\n      collapse,\n      refresh,\n      settings,\n      settingsInverse,\n      tooltipPlacement,\n      showTooltip,\n      bodyClass,\n      customControls,\n      customClose,\n      customExpand,\n      customCollapse,\n      customFullscreen,\n      customReload,\n      fetchingData,\n      customDropDown,\n      customBody,\n      prompt,\n      collapsed,\n      widgetType,\n      updateWidgetData,\n      options, //eslint-disable-line\n      ...attributes\n    } = this.props;\n    const mainControls = !!(\n      close ||\n      fullscreen ||\n      collapse ||\n      refresh ||\n      settings ||\n      settingsInverse\n    );\n\n    const {\n      reloading,\n      fullscreened,\n      randomId,\n      height,\n      hideWidget,\n      collapseWidget,\n      modal,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <section\n          style={{ display: hideWidget ? \"none\" : \"\" }}\n          className={classNames(\n            \"widget\",\n            { fullscreened: !!fullscreened, collapsed: !!collapseWidget },\n            s.widget,\n            className,\n            reloading || fetchingData ? s.reloading : \"\"\n          )}\n          {...attributes}\n        >\n          {title &&\n            (typeof title === \"string\" ? (\n              <h5 className={s.title}>{title}</h5>\n            ) : (\n              <header className={s.title}>{title}</header>\n            ))}\n\n          {!customControls && mainControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {settings && (\n                <button>\n                  <i className=\"la la-cog\" />\n                </button>\n              )}\n              {settingsInverse && (\n                <button className={`bg-gray-transparent ${s.inverse}`}>\n                  <i className=\"la la-cog text-white\" />\n                </button>\n              )}\n              {refresh && (\n                <button onClick={this.handleReload} id={`reloadId-${randomId}`}>\n                  {typeof refresh === \"string\" ? (\n                    <strong className=\"text-gray-light\">{refresh}</strong>\n                  ) : (\n                    <i className=\"la la-refresh\" />\n                  )}\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`reloadId-${randomId}`}\n                    >\n                      Reload\n                    </UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {fullscreen && (\n                <button\n                  onClick={this.handleFullscreen}\n                  id={`fullscreenId-${randomId}`}\n                >\n                  <i\n                    className={`la la-${fullscreened ? \"compress\" : \"expand\"}`}\n                  />\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`fullscreenId-${randomId}`}\n                    >\n                      Fullscreen\n                    </UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {!fullscreened && collapse && (\n                <span>\n                  <button\n                    onClick={this.handleCollapse}\n                    id={`collapseId-${randomId}`}\n                  >\n                    <i\n                      className={`la la-angle-${\n                        !collapseWidget ? \"down\" : \"up\"\n                      }`}\n                    />\n                    {showTooltip && (\n                      <UncontrolledTooltip\n                        placement={tooltipPlacement}\n                        target={`collapseId-${randomId}`}\n                      >\n                        Collapse\n                      </UncontrolledTooltip>\n                    )}\n                  </button>\n                </span>\n              )}\n              {!fullscreened &&\n                (close && !prompt ? (\n                  <button onClick={this.handleClose} id={`closeId-${randomId}`}>\n                    {typeof close === \"string\" ? (\n                      <strong className=\"text-gray-light\">{close}</strong>\n                    ) : (\n                      <i className=\"la la-remove\" />\n                    )}\n                    {showTooltip && (\n                      <UncontrolledTooltip\n                        placement={tooltipPlacement}\n                        target={`closeId-${randomId}`}\n                      >\n                        Close\n                      </UncontrolledTooltip>\n                    )}\n                  </button>\n                ) : (\n                  <button onClick={this.toggleModal} id={`closeId-${randomId}`}>\n                    {typeof close === \"string\" ? (\n                      <strong className=\"text-gray-light\">{close}</strong>\n                    ) : (\n                      <i className=\"la la-remove\" />\n                    )}\n                    {showTooltip && (\n                      <UncontrolledTooltip\n                        placement={tooltipPlacement}\n                        target={`closeId-${randomId}`}\n                      >\n                        Modal\n                      </UncontrolledTooltip>\n                    )}\n                  </button>\n                ))}\n            </div>\n          )}\n          {customDropDown && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              <UncontrolledDropdown>\n                <DropdownToggle tag=\"span\" data-toggle=\"dropdown\">\n                  <i className=\"la la-cog\" />\n                </DropdownToggle>\n                <DropdownMenu className=\"bg-widget-transparent\" right>\n                  <DropdownItem onClick={this.handleReload} title=\"Reload\">\n                    Reload &nbsp;&nbsp;\n                    <span className=\"badge badge-pill badge-success animated bounceIn\">\n                      <strong>9</strong>\n                    </span>\n                  </DropdownItem>\n\n                  <DropdownItem\n                    onClick={this.handleFullscreen}\n                    title={!fullscreened ? \"Full Screen\" : \"Restore\"}\n                  >\n                    {!fullscreened ? \"Fullscreen\" : \"Restore\"}{\" \"}\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  {!fullscreened &&\n                    (!prompt ? (\n                      <DropdownItem onClick={this.handleClose} title=\"Close\">\n                        Close\n                      </DropdownItem>\n                    ) : (\n                      <DropdownItem onClick={this.toggleModal} title=\"Close\">\n                        Close\n                      </DropdownItem>\n                    ))}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </div>\n          )}\n          {customControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {!fullscreened &&\n                (customClose && !prompt ? (\n                  <button\n                    onClick={this.handleClose}\n                    id={`closeId-${randomId}`}\n                    className={s.customControlItem}\n                  >\n                    <i title=\"Close\" className=\"la la-times\" />\n                  </button>\n                ) : (\n                  <button\n                    onClick={this.toggleModal}\n                    id={`closeId-${randomId}`}\n                    className={s.customControlItem}\n                  >\n                    <i title=\"Close\" className=\"la la-times\" />\n                  </button>\n                ))}\n              {!fullscreened && customCollapse && (\n                <button\n                  onClick={this.handleCollapse}\n                  id={`closeId-${randomId}`}\n                  className={s.customControlItem}\n                >\n                  <i\n                    title=\"Collapse\"\n                    className={`la la-angle-${!collapseWidget ? \"down\" : \"up\"}`}\n                  />\n                </button>\n              )}\n              {customFullscreen && (\n                <button\n                  onClick={this.handleFullscreen}\n                  id={`closeId-${randomId}`}\n                  className={s.customControlItem}\n                >\n                  <i\n                    title=\"Fullscreen\"\n                    className={`la la-${fullscreened ? \"compress\" : \"expand\"}`}\n                  />\n                </button>\n              )}\n              {customReload && (\n                <button\n                  onClick={this.handleReload}\n                  id={`closeId-${randomId}`}\n                  className={s.customControlItem}\n                >\n                  <i title=\"I am spinning!\" className=\"la la-refresh\" />\n                </button>\n              )}\n            </div>\n          )}\n          <AnimateHeight duration={500} height={height}>\n            <div className={`${s.widgetBody} widget-body ${bodyClass}`}>\n              {reloading || fetchingData ? (\n                <Loader className={s.widgetLoader} size={40} />\n              ) : customBody ? (\n                <div className=\"jumbotron handle bg-inverse text-white mb-0\">\n                  <div className=\"container\">\n                    <h1>Draggable story!</h1>\n                    <p className=\"lead\">\n                      <em>Build</em> your own interfaces! Sit back and relax.\n                    </p>\n                    <p className=\"text-center\">\n                      <button\n                        onClick={this.handleFullscreen}\n                        className=\"btn btn-danger btn-lg\"\n                      >\n                        {!fullscreened ? (\n                          <React.Fragment>\n                            Fullscreen me! &nbsp;\n                            <i className=\"la la-check\" />\n                          </React.Fragment>\n                        ) : (\n                          \"Go Back\"\n                        )}\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                children\n              )}\n            </div>\n          </AnimateHeight>\n        </section>\n        {prompt && (\n          <Modal isOpen={modal} toggle={this.toggleModal} id=\"news-close-modal\">\n            <ModalHeader toggle={this.toggleModal} id=\"news-close-modal-label\">\n              Sure?\n            </ModalHeader>\n            <ModalBody className=\"bg-white\">\n              Do you really want to unrevertably remove this super news widget?\n            </ModalBody>\n            <ModalFooter>\n              <Button\n                color=\"default\"\n                onClick={this.toggleModal}\n                data-dismiss=\"modal\"\n              >\n                No\n              </Button>{\" \"}\n              <Button\n                color=\"danger\"\n                onClick={this.closeWithModal}\n                id=\"news-widget-remove\"\n              >\n                Yes, remove widget\n              </Button>\n            </ModalFooter>\n          </Modal>\n        )}\n        <div\n          style={{ display: fullscreened ? \"block\" : \"none\" }}\n          className={s.widgetBackground}\n        ></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Widget;\n"]},"metadata":{},"sourceType":"module"}