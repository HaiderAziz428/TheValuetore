{"ast":null,"code":"import axios from \"axios\";\nimport Errors from \"../../../components/admin/FormItems/error/errors\";\nimport { push } from \"connected-react-router\";\nimport { doInit } from \"redux/actions/auth\";\nimport { toast } from \"react-toastify\";\nconst actions = {\n  doNew: () => {\n    return {\n      type: \"PRODUCTS_FORM_RESET\"\n    };\n  },\n  doFind: id => async dispatch => {\n    try {\n      dispatch({\n        type: \"PRODUCTS_FORM_FIND_STARTED\"\n      });\n      axios.get(`/products/${id}`).then(res => {\n        const record = res.data;\n        dispatch({\n          type: \"PRODUCTS_FORM_FIND_SUCCESS\",\n          payload: record\n        });\n      });\n    } catch (error) {\n      Errors.handle(error);\n      dispatch({\n        type: \"PRODUCTS_FORM_FIND_ERROR\"\n      });\n      dispatch(push(\"/admin/products\"));\n    }\n  },\n  doCreate: values => async dispatch => {\n    try {\n      dispatch({\n        type: \"PRODUCTS_FORM_CREATE_STARTED\"\n      });\n      axios.post(\"/products\", {\n        data: values\n      }).then(res => {\n        dispatch({\n          type: \"PRODUCTS_FORM_CREATE_SUCCESS\"\n        });\n        toast.success(\"products created\");\n        dispatch(push(\"/admin/products\"));\n      });\n    } catch (error) {\n      Errors.handle(error);\n      dispatch({\n        type: \"PRODUCTS_FORM_CREATE_ERROR\"\n      });\n    }\n  },\n  doUpdate: (id, values, isProfile) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: \"PRODUCTS_FORM_UPDATE_STARTED\"\n      });\n      await axios.put(`/products/${id}`, {\n        id,\n        data: values\n      });\n      dispatch(doInit());\n      dispatch({\n        type: \"PRODUCTS_FORM_UPDATE_SUCCESS\"\n      });\n\n      if (isProfile) {\n        toast.success(\"Profile updated\");\n      } else {\n        toast.success(\"products updated\");\n        dispatch(push(\"/admin/products\"));\n      }\n    } catch (error) {\n      Errors.handle(error);\n      dispatch({\n        type: \"PRODUCTS_FORM_UPDATE_ERROR\"\n      });\n    }\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/redux/actions/products/productsFormActions.js"],"names":["axios","Errors","push","doInit","toast","actions","doNew","type","doFind","id","dispatch","get","then","res","record","data","payload","error","handle","doCreate","values","post","success","doUpdate","isProfile","getState","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Errors from \"../../../components/admin/FormItems/error/errors\";\nimport { push } from \"connected-react-router\";\nimport { doInit } from \"redux/actions/auth\";\nimport { toast } from \"react-toastify\";\n\nconst actions = {\n  doNew: () => {\n    return {\n      type: \"PRODUCTS_FORM_RESET\",\n    };\n  },\n\n  doFind: (id) => async (dispatch) => {\n    try {\n      dispatch({\n        type: \"PRODUCTS_FORM_FIND_STARTED\",\n      });\n\n      axios.get(`/products/${id}`).then((res) => {\n        const record = res.data;\n\n        dispatch({\n          type: \"PRODUCTS_FORM_FIND_SUCCESS\",\n          payload: record,\n        });\n      });\n    } catch (error) {\n      Errors.handle(error);\n\n      dispatch({\n        type: \"PRODUCTS_FORM_FIND_ERROR\",\n      });\n\n      dispatch(push(\"/admin/products\"));\n    }\n  },\n\n  doCreate: (values) => async (dispatch) => {\n    try {\n      dispatch({\n        type: \"PRODUCTS_FORM_CREATE_STARTED\",\n      });\n\n      axios.post(\"/products\", { data: values }).then((res) => {\n        dispatch({\n          type: \"PRODUCTS_FORM_CREATE_SUCCESS\",\n        });\n\n        toast.success(\"products created\");\n        dispatch(push(\"/admin/products\"));\n      });\n    } catch (error) {\n      Errors.handle(error);\n\n      dispatch({\n        type: \"PRODUCTS_FORM_CREATE_ERROR\",\n      });\n    }\n  },\n\n  doUpdate: (id, values, isProfile) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: \"PRODUCTS_FORM_UPDATE_STARTED\",\n      });\n\n      await axios.put(`/products/${id}`, { id, data: values });\n\n      dispatch(doInit());\n\n      dispatch({\n        type: \"PRODUCTS_FORM_UPDATE_SUCCESS\",\n      });\n\n      if (isProfile) {\n        toast.success(\"Profile updated\");\n      } else {\n        toast.success(\"products updated\");\n        dispatch(push(\"/admin/products\"));\n      }\n    } catch (error) {\n      Errors.handle(error);\n\n      dispatch({\n        type: \"PRODUCTS_FORM_UPDATE_ERROR\",\n      });\n    }\n  },\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}