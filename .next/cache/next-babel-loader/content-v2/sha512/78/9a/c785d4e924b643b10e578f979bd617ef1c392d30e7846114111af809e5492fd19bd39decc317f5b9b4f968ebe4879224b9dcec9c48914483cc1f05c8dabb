{"ast":null,"code":"import axios from \"axios\";\nimport config from \"constants/config\";\nimport jwt from \"jsonwebtoken\";\nimport { toast } from \"react-toastify\";\nimport Errors from \"components/admin/FormItems/error/errors\";\nimport Router from 'next/router';\nexport const AUTH_FAILURE = \"AUTH_FAILURE\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const RESET_REQUEST = \"RESET_REQUEST\";\nexport const RESET_SUCCESS = \"RESET_SUCCESS\";\nexport const PASSWORD_RESET_EMAIL_REQUEST = \"PASSWORD_RESET_EMAIL_REQUEST\";\nexport const PASSWORD_RESET_EMAIL_SUCCESS = \"PASSWORD_RESET_EMAIL_SUCCESS\";\nexport const AUTH_INIT_SUCCESS = \"AUTH_INIT_SUCCESS\";\nexport const AUTH_INIT_ERROR = \"AUTH_INIT_ERROR\";\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\n\nasync function findMe() {\n  const response = await axios.get(\"/auth/me\");\n  return response.data;\n}\n\nexport function authError(payload) {\n  return {\n    type: AUTH_FAILURE,\n    payload\n  };\n}\nexport function doInit() {\n  return async dispatch => {\n    try {\n      let currentUser = null;\n      let token = false && localStorage.getItem(\"token\");\n\n      if (token) {\n        currentUser = await findMe();\n      }\n\n      dispatch({\n        type: AUTH_INIT_SUCCESS,\n        payload: {\n          currentUser\n        }\n      });\n    } catch (error) {\n      Errors.handle(error);\n      dispatch({\n        type: AUTH_INIT_ERROR,\n        payload: error\n      });\n    }\n  };\n}\nexport function logoutUser() {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    false && localStorage.removeItem(\"token\");\n    false && localStorage.removeItem(\"user\");\n    axios.defaults.headers.common[\"Authorization\"] = \"\";\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  };\n}\nexport function receiveToken(token) {\n  return dispatch => {\n    let user = jwt.decode(token);\n    false && localStorage.setItem(\"token\", token);\n    false && localStorage.setItem(\"user\", JSON.stringify(user));\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n    dispatch({\n      type: LOGIN_SUCCESS\n    });\n    false && dispatch(push(\"/app\"));\n  };\n}\nexport function loginUser(creds) {\n  return dispatch => {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n\n    if (creds.social) {\n      window.location.href = config.baseURLApi + \"/auth/signin/\" + creds.social;\n    } else if (creds.email.length > 0 && creds.password.length > 0) {\n      axios.post(\"/auth/signin/local\", creds).then(res => {\n        const token = res.data;\n        dispatch(receiveToken(token));\n        dispatch(doInit());\n        false && dispatch(push(\"/app\"));\n      }).catch(err => {\n        console.log(err.response);\n        dispatch(authError(err.response));\n      });\n    } else {\n      dispatch(authError(\"Something was wrong. Try again\"));\n    }\n  };\n}\nexport function verifyEmail(token) {\n  return dispatch => {\n    axios.put(\"/auth/verify-email\", {\n      token\n    }).then(verified => {\n      if (verified) {\n        toast.success(\"Your email was verified\");\n      }\n    }).catch(err => {\n      toast.error(err.response.data);\n    }).finally(() => {\n      dispatch(push(\"/login\"));\n    });\n  };\n}\nexport function resetPassword(token, password) {\n  return dispatch => {\n    dispatch({\n      type: RESET_REQUEST\n    });\n    axios.put(\"/auth/password-reset\", {\n      token,\n      password\n    }).then(res => {\n      dispatch({\n        type: RESET_SUCCESS\n      });\n      toast.success(\"Password has been updated\");\n      dispatch(push(\"/login\"));\n    }).catch(err => {\n      dispatch(authError(err.response.data));\n    });\n  };\n}\nexport function sendPasswordResetEmail(email) {\n  return dispatch => {\n    dispatch({\n      type: PASSWORD_RESET_EMAIL_REQUEST\n    });\n    axios.post(\"/auth/send-password-reset-email\", {\n      email\n    }).then(res => {\n      dispatch({\n        type: PASSWORD_RESET_EMAIL_SUCCESS\n      });\n      toast.success(\"Email with resetting instructions has been sent\");\n      dispatch(push(\"/login\"));\n    }).catch(err => {\n      dispatch(authError(err.response.data));\n    });\n  };\n}\nexport function registerUser(creds) {\n  return dispatch => {\n    dispatch({\n      type: REGISTER_REQUEST\n    });\n\n    if (creds.email.length > 0 && creds.password.length > 0) {\n      axios.post(\"/auth/signup\", creds).then(res => {\n        dispatch({\n          type: REGISTER_SUCCESS\n        });\n        toast.success(\"You've been registered successfully. Please check your email for verification link\");\n        dispatch(push(\"/login\"));\n      }).catch(err => {\n        dispatch(authError(err.response.data));\n      });\n    } else {\n      dispatch(authError(\"Something was wrong. Try again\"));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/redux/actions/auth.js"],"names":["axios","config","jwt","toast","Errors","Router","AUTH_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_REQUEST","LOGOUT_SUCCESS","RESET_REQUEST","RESET_SUCCESS","PASSWORD_RESET_EMAIL_REQUEST","PASSWORD_RESET_EMAIL_SUCCESS","AUTH_INIT_SUCCESS","AUTH_INIT_ERROR","REGISTER_REQUEST","REGISTER_SUCCESS","findMe","response","get","data","authError","payload","type","doInit","dispatch","currentUser","token","localStorage","getItem","error","handle","logoutUser","removeItem","defaults","headers","common","receiveToken","user","decode","setItem","JSON","stringify","push","loginUser","creds","social","window","location","href","baseURLApi","email","length","password","post","then","res","catch","err","console","log","verifyEmail","put","verified","success","finally","resetPassword","sendPasswordResetEmail","registerUser"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport config from \"constants/config\";\nimport jwt from \"jsonwebtoken\";\nimport { toast } from \"react-toastify\";\nimport Errors from \"components/admin/FormItems/error/errors\";\nimport Router from 'next/router';\n\nexport const AUTH_FAILURE = \"AUTH_FAILURE\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const RESET_REQUEST = \"RESET_REQUEST\";\nexport const RESET_SUCCESS = \"RESET_SUCCESS\";\nexport const PASSWORD_RESET_EMAIL_REQUEST = \"PASSWORD_RESET_EMAIL_REQUEST\";\nexport const PASSWORD_RESET_EMAIL_SUCCESS = \"PASSWORD_RESET_EMAIL_SUCCESS\";\nexport const AUTH_INIT_SUCCESS = \"AUTH_INIT_SUCCESS\";\nexport const AUTH_INIT_ERROR = \"AUTH_INIT_ERROR\";\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\n\nasync function findMe() {\n  const response = await axios.get(\"/auth/me\");\n  return response.data;\n}\n\nexport function authError(payload) {\n  return {\n    type: AUTH_FAILURE,\n    payload,\n  };\n}\n\nexport function doInit() {\n  return async (dispatch) => {\n    try {\n      let currentUser = null;\n      let token = typeof window !== 'undefined' && localStorage.getItem(\"token\");\n      if (token) {\n        currentUser = await findMe();\n      }\n      dispatch({\n        type: AUTH_INIT_SUCCESS,\n        payload: {\n          currentUser,\n        },\n      });\n    } catch (error) {\n      Errors.handle(error);\n\n      dispatch({\n        type: AUTH_INIT_ERROR,\n        payload: error,\n      });\n    }\n  };\n}\n\nexport function logoutUser() {\n  return (dispatch) => {\n    dispatch({\n      type: LOGOUT_REQUEST,\n    });\n    typeof window !== 'undefined' && localStorage.removeItem(\"token\");\n    typeof window !== 'undefined' && localStorage.removeItem(\"user\");\n    axios.defaults.headers.common[\"Authorization\"] = \"\";\n    dispatch({\n      type: LOGOUT_SUCCESS,\n    });\n  };\n}\n\nexport function receiveToken(token) {\n  return (dispatch) => {\n    let user = jwt.decode(token);\n\n    typeof window !== 'undefined' && localStorage.setItem(\"token\", token);\n    typeof window !== 'undefined' && localStorage.setItem(\"user\", JSON.stringify(user));\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n    dispatch({\n      type: LOGIN_SUCCESS,\n    });\n    typeof window !== 'undefined' && dispatch(push(\"/app\"));\n  };\n}\n\nexport function loginUser(creds) {\n  return (dispatch) => {\n    dispatch({\n      type: LOGIN_REQUEST,\n    });\n    if (creds.social) {\n      window.location.href = config.baseURLApi + \"/auth/signin/\" + creds.social;\n    } else if (creds.email.length > 0 && creds.password.length > 0) {\n      axios\n        .post(\"/auth/signin/local\", creds)\n        .then((res) => {\n          const token = res.data;\n          dispatch(receiveToken(token));\n          dispatch(doInit());\n          typeof window !== 'undefined' && dispatch(push(\"/app\"));\n        })\n        .catch((err) => {\n          console.log(err.response);\n          dispatch(authError(err.response));\n        });\n    } else {\n      dispatch(authError(\"Something was wrong. Try again\"));\n    }\n  };\n}\n\nexport function verifyEmail(token) {\n  return (dispatch) => {\n    axios\n      .put(\"/auth/verify-email\", { token })\n      .then((verified) => {\n        if (verified) {\n          toast.success(\"Your email was verified\");\n        }\n      })\n      .catch((err) => {\n        toast.error(err.response.data);\n      })\n      .finally(() => {\n        dispatch(push(\"/login\"));\n      });\n  };\n}\n\nexport function resetPassword(token, password) {\n  return (dispatch) => {\n    dispatch({\n      type: RESET_REQUEST,\n    });\n    axios\n      .put(\"/auth/password-reset\", { token, password })\n      .then((res) => {\n        dispatch({\n          type: RESET_SUCCESS,\n        });\n        toast.success(\"Password has been updated\");\n        dispatch(push(\"/login\"));\n      })\n      .catch((err) => {\n        dispatch(authError(err.response.data));\n      });\n  };\n}\n\nexport function sendPasswordResetEmail(email) {\n  return (dispatch) => {\n    dispatch({\n      type: PASSWORD_RESET_EMAIL_REQUEST,\n    });\n    axios\n      .post(\"/auth/send-password-reset-email\", { email })\n      .then((res) => {\n        dispatch({\n          type: PASSWORD_RESET_EMAIL_SUCCESS,\n        });\n        toast.success(\"Email with resetting instructions has been sent\");\n        dispatch(push(\"/login\"));\n      })\n      .catch((err) => {\n        dispatch(authError(err.response.data));\n      });\n  };\n}\n\nexport function registerUser(creds) {\n  return (dispatch) => {\n    dispatch({\n      type: REGISTER_REQUEST,\n    });\n\n    if (creds.email.length > 0 && creds.password.length > 0) {\n      axios\n        .post(\"/auth/signup\", creds)\n        .then((res) => {\n          dispatch({\n            type: REGISTER_SUCCESS,\n          });\n          toast.success(\n            \"You've been registered successfully. Please check your email for verification link\"\n          );\n          dispatch(push(\"/login\"));\n        })\n        .catch((err) => {\n          dispatch(authError(err.response.data));\n        });\n    } else {\n      dispatch(authError(\"Something was wrong. Try again\"));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}