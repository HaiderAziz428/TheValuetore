{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/components/admin/Widget/Widget.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { UncontrolledTooltip } from \"reactstrap\";\nimport s from \"./Widget.module.scss\";\nimport classNames from \"classnames\";\nimport Loader from \"../Loader\"; // eslint-disable-line\n\nimport AnimateHeight from \"react-animate-height\";\nimport uuidv4 from \"uuid/v4\";\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nclass Widget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleModal\", () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        hideWidget: !this.state.hideWidget\n      });\n    });\n\n    _defineProperty(this, \"handleCollapse\", () => {\n      let heightValue = this.state.collapseWidget ? \"auto\" : 0;\n      this.setState({\n        height: heightValue,\n        collapseWidget: !this.state.collapseWidget,\n        reloading: false\n      });\n    });\n\n    _defineProperty(this, \"closeWithModal\", () => {\n      this.toggleModal();\n      this.handleClose();\n    });\n\n    _defineProperty(this, \"handleExpand\", () => {\n      this.setState({\n        height: \"auto\",\n        collapseWidget: false\n      });\n    });\n\n    _defineProperty(this, \"handleReload\", () => {\n      const {\n        widgetType,\n        updateWidgetData\n      } = this.props;\n      const type = widgetType;\n\n      if (type) {\n        updateWidgetData(type);\n      }\n\n      this.setState({\n        reloading: true\n      });\n      let endpoint = false;\n\n      if (!endpoint) {\n        setTimeout(() => this.setState({\n          reloading: false\n        }), 2000);\n      } else {\n        this.setState({\n          reloading: true\n        });\n        fetch(\"https://yourapi.com\").then(response => response.json()).then(json => this.setState({\n          apiData: json.title\n        })).then(setTimeout(() => this.setState({\n          reloading: false\n        }), 1000));\n      }\n    });\n\n    _defineProperty(this, \"handleFullscreen\", () => {\n      this.setState({\n        fullscreened: !this.state.fullscreened\n      });\n    });\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height: props.collapsed ? 0 : \"auto\",\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: \"\"\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      title,\n      className,\n      children,\n      close,\n      fullscreen,\n      collapse,\n      refresh,\n      settings,\n      settingsInverse,\n      tooltipPlacement,\n      showTooltip,\n      bodyClass,\n      customControls,\n      customClose,\n      customExpand,\n      customCollapse,\n      customFullscreen,\n      customReload,\n      fetchingData,\n      customDropDown,\n      customBody,\n      prompt,\n      collapsed,\n      widgetType,\n      updateWidgetData,\n      options\n    } = _this$props,\n          attributes = _objectWithoutProperties(_this$props, [\"title\", \"className\", \"children\", \"close\", \"fullscreen\", \"collapse\", \"refresh\", \"settings\", \"settingsInverse\", \"tooltipPlacement\", \"showTooltip\", \"bodyClass\", \"customControls\", \"customClose\", \"customExpand\", \"customCollapse\", \"customFullscreen\", \"customReload\", \"fetchingData\", \"customDropDown\", \"customBody\", \"prompt\", \"collapsed\", \"widgetType\", \"updateWidgetData\", \"options\"]);\n\n    const mainControls = !!(close || fullscreen || collapse || refresh || settings || settingsInverse);\n    const {\n      reloading,\n      fullscreened,\n      randomId,\n      height,\n      hideWidget,\n      collapseWidget,\n      modal\n    } = this.state;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, __jsx(\"section\", _extends({\n      style: {\n        display: hideWidget ? \"none\" : \"\"\n      },\n      className: classNames(\"widget\", {\n        fullscreened: !!fullscreened,\n        collapsed: !!collapseWidget\n      }, s.widget, className, reloading || fetchingData ? s.reloading : \"\")\n    }, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }), title && (typeof title === \"string\" ? __jsx(\"h5\", {\n      className: s.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }\n    }, title) : __jsx(\"header\", {\n      className: s.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }\n    }, title)), !customControls && mainControls && __jsx(\"div\", {\n      className: `${s.widgetControls} widget-controls`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, settings && __jsx(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: \"la la-cog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    })), settingsInverse && __jsx(\"button\", {\n      className: `bg-gray-transparent ${s.inverse}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: \"la la-cog text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 19\n      }\n    })), refresh && __jsx(\"button\", {\n      onClick: this.handleReload,\n      id: `reloadId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, typeof refresh === \"string\" ? __jsx(\"strong\", {\n      className: \"text-gray-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, refresh) : __jsx(\"i\", {\n      className: \"la la-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    }), showTooltip && __jsx(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: `reloadId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }, \"Reload\")), fullscreen && __jsx(\"button\", {\n      onClick: this.handleFullscreen,\n      id: `fullscreenId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: `la la-${fullscreened ? \"compress\" : \"expand\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }), showTooltip && __jsx(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: `fullscreenId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, \"Fullscreen\")), !fullscreened && collapse && __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }, __jsx(\"button\", {\n      onClick: this.handleCollapse,\n      id: `collapseId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 19\n      }\n    }, __jsx(\"i\", {\n      className: `la la-angle-${!collapseWidget ? \"down\" : \"up\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    }), showTooltip && __jsx(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: `collapseId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 23\n      }\n    }, \"Collapse\"))), !fullscreened && (close && !prompt ? __jsx(\"button\", {\n      onClick: this.handleClose,\n      id: `closeId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 19\n      }\n    }, typeof close === \"string\" ? __jsx(\"strong\", {\n      className: \"text-gray-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 23\n      }\n    }, close) : __jsx(\"i\", {\n      className: \"la la-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 23\n      }\n    }), showTooltip && __jsx(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: `closeId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 23\n      }\n    }, \"Close\")) : __jsx(\"button\", {\n      onClick: this.toggleModal,\n      id: `closeId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 19\n      }\n    }, typeof close === \"string\" ? __jsx(\"strong\", {\n      className: \"text-gray-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 23\n      }\n    }, close) : __jsx(\"i\", {\n      className: \"la la-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 23\n      }\n    }), showTooltip && __jsx(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: `closeId-${randomId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 23\n      }\n    }, \"Modal\")))), customDropDown && __jsx(\"div\", {\n      className: `${s.widgetControls} widget-controls`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, __jsx(UncontrolledDropdown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 15\n      }\n    }, __jsx(DropdownToggle, {\n      tag: \"span\",\n      \"data-toggle\": \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      className: \"la la-cog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 19\n      }\n    })), __jsx(DropdownMenu, {\n      className: \"bg-widget-transparent\",\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }\n    }, __jsx(DropdownItem, {\n      onClick: this.handleReload,\n      title: \"Reload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 19\n      }\n    }, \"Reload \\xA0\\xA0\", __jsx(\"span\", {\n      className: \"badge badge-pill badge-success animated bounceIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 21\n      }\n    }, __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 23\n      }\n    }, \"9\"))), __jsx(DropdownItem, {\n      onClick: this.handleFullscreen,\n      title: !fullscreened ? \"Full Screen\" : \"Restore\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 19\n      }\n    }, !fullscreened ? \"Fullscreen\" : \"Restore\", \" \"), __jsx(DropdownItem, {\n      divider: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 19\n      }\n    }), !fullscreened && (!prompt ? __jsx(DropdownItem, {\n      onClick: this.handleClose,\n      title: \"Close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 23\n      }\n    }, \"Close\") : __jsx(DropdownItem, {\n      onClick: this.toggleModal,\n      title: \"Close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 23\n      }\n    }, \"Close\"))))), customControls && __jsx(\"div\", {\n      className: `${s.widgetControls} widget-controls`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 13\n      }\n    }, !fullscreened && (customClose && !prompt ? __jsx(\"button\", {\n      onClick: this.handleClose,\n      id: `closeId-${randomId}`,\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 19\n      }\n    }, __jsx(\"i\", {\n      title: \"Close\",\n      className: \"la la-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }\n    })) : __jsx(\"button\", {\n      onClick: this.toggleModal,\n      id: `closeId-${randomId}`,\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 19\n      }\n    }, __jsx(\"i\", {\n      title: \"Close\",\n      className: \"la la-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 21\n      }\n    }))), !fullscreened && customCollapse && __jsx(\"button\", {\n      onClick: this.handleCollapse,\n      id: `closeId-${randomId}`,\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      title: \"Collapse\",\n      className: `la la-angle-${!collapseWidget ? \"down\" : \"up\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 19\n      }\n    })), customFullscreen && __jsx(\"button\", {\n      onClick: this.handleFullscreen,\n      id: `closeId-${randomId}`,\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      title: \"Fullscreen\",\n      className: `la la-${fullscreened ? \"compress\" : \"expand\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 19\n      }\n    })), customReload && __jsx(\"button\", {\n      onClick: this.handleReload,\n      id: `closeId-${randomId}`,\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }\n    }, __jsx(\"i\", {\n      title: \"I am spinning!\",\n      className: \"la la-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 19\n      }\n    }))), __jsx(AnimateHeight, {\n      duration: 500,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: `${s.widgetBody} widget-body ${bodyClass}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 13\n      }\n    }, reloading || fetchingData ? __jsx(Loader, {\n      className: s.widgetLoader,\n      size: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }\n    }) : customBody ? __jsx(\"div\", {\n      className: \"jumbotron handle bg-inverse text-white mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 19\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 21\n      }\n    }, \"Draggable story!\"), __jsx(\"p\", {\n      className: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }\n    }, __jsx(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 23\n      }\n    }, \"Build\"), \" your own interfaces! Sit back and relax.\"), __jsx(\"p\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 21\n      }\n    }, __jsx(\"button\", {\n      onClick: this.handleFullscreen,\n      className: \"btn btn-danger btn-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 23\n      }\n    }, !fullscreened ? __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 27\n      }\n    }, \"Fullscreen me! \\xA0\", __jsx(\"i\", {\n      className: \"la la-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 29\n      }\n    })) : \"Go Back\")))) : children))), prompt && __jsx(Modal, {\n      isOpen: modal,\n      toggle: this.toggleModal,\n      id: \"news-close-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }\n    }, __jsx(ModalHeader, {\n      toggle: this.toggleModal,\n      id: \"news-close-modal-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 13\n      }\n    }, \"Sure?\"), __jsx(ModalBody, {\n      className: \"bg-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 13\n      }\n    }, \"Do you really want to unrevertably remove this super news widget?\"), __jsx(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      color: \"default\",\n      onClick: this.toggleModal,\n      \"data-dismiss\": \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 15\n      }\n    }, \"No\"), \" \", __jsx(Button, {\n      color: \"danger\",\n      onClick: this.closeWithModal,\n      id: \"news-widget-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 15\n      }\n    }, \"Yes, remove widget\"))), __jsx(\"div\", {\n      style: {\n        display: fullscreened ? \"block\" : \"none\"\n      },\n      className: s.widgetBackground,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(Widget, \"propTypes\", {\n  title: PropTypes.node,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  fullscreen: PropTypes.bool,\n  collapse: PropTypes.bool,\n  refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  settings: PropTypes.bool,\n  settingsInverse: PropTypes.bool,\n  tooltipPlacement: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  bodyClass: PropTypes.string,\n  customControls: PropTypes.bool,\n  options: PropTypes.object,\n  //eslint-disable-line,\n  fetchingData: PropTypes.bool\n});\n\n_defineProperty(Widget, \"defaultProps\", {\n  title: null,\n  className: \"\",\n  children: [],\n  close: false,\n  fullscreen: false,\n  collapse: false,\n  refresh: false,\n  settings: false,\n  settingsInverse: false,\n  tooltipPlacement: \"bottom\",\n  showTooltip: false,\n  bodyClass: \"\",\n  customControls: false,\n  customClose: null,\n  customExpand: null,\n  customCollapse: null,\n  customFullscreen: null,\n  customReload: null,\n  customDropDown: null,\n  prompt: false,\n  collapsed: false,\n  options: {},\n  fetchingData: false,\n  widgetType: \"\"\n});\n\nexport default Widget;","map":{"version":3,"sources":["/Users/michaeldaineka/Desktop/flatlogic/flatlogic-ecommerce/components/admin/Widget/Widget.js"],"names":["React","PropTypes","UncontrolledTooltip","s","classNames","Loader","AnimateHeight","uuidv4","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Button","Modal","ModalHeader","ModalBody","ModalFooter","Widget","Component","constructor","props","setState","modal","state","hideWidget","heightValue","collapseWidget","height","reloading","toggleModal","handleClose","widgetType","updateWidgetData","type","endpoint","setTimeout","fetch","then","response","json","apiData","title","fullscreened","randomId","collapsed","render","className","children","close","fullscreen","collapse","refresh","settings","settingsInverse","tooltipPlacement","showTooltip","bodyClass","customControls","customClose","customExpand","customCollapse","customFullscreen","customReload","fetchingData","customDropDown","customBody","prompt","options","attributes","mainControls","display","widget","widgetControls","inverse","handleReload","handleFullscreen","handleCollapse","customControlItem","widgetBody","widgetLoader","closeWithModal","widgetBackground","node","string","oneOfType","arrayOf","bool","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { UncontrolledTooltip } from \"reactstrap\";\nimport s from \"./Widget.module.scss\";\nimport classNames from \"classnames\";\nimport Loader from \"../Loader\"; // eslint-disable-line\nimport AnimateHeight from \"react-animate-height\";\nimport uuidv4 from \"uuid/v4\";\nimport {\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from \"reactstrap\";\n\nclass Widget extends React.Component {\n  static propTypes = {\n    title: PropTypes.node,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]),\n    close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    fullscreen: PropTypes.bool,\n    collapse: PropTypes.bool,\n    refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    settings: PropTypes.bool,\n    settingsInverse: PropTypes.bool,\n    tooltipPlacement: PropTypes.string,\n    showTooltip: PropTypes.bool,\n    bodyClass: PropTypes.string,\n    customControls: PropTypes.bool,\n    options: PropTypes.object, //eslint-disable-line,\n    fetchingData: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    title: null,\n    className: \"\",\n    children: [],\n    close: false,\n    fullscreen: false,\n    collapse: false,\n    refresh: false,\n    settings: false,\n    settingsInverse: false,\n    tooltipPlacement: \"bottom\",\n    showTooltip: false,\n    bodyClass: \"\",\n    customControls: false,\n    customClose: null,\n    customExpand: null,\n    customCollapse: null,\n    customFullscreen: null,\n    customReload: null,\n    customDropDown: null,\n    prompt: false,\n    collapsed: false,\n    options: {},\n    fetchingData: false,\n    widgetType: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height: props.collapsed ? 0 : \"auto\",\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: \"\",\n    };\n  }\n\n  toggleModal = () => {\n    this.setState({ modal: !this.state.modal });\n  };\n\n  handleClose = () => {\n    this.setState({ hideWidget: !this.state.hideWidget });\n  };\n\n  handleCollapse = () => {\n    let heightValue = this.state.collapseWidget ? \"auto\" : 0;\n    this.setState({\n      height: heightValue,\n      collapseWidget: !this.state.collapseWidget,\n      reloading: false,\n    });\n  };\n\n  closeWithModal = () => {\n    this.toggleModal();\n    this.handleClose();\n  };\n\n  handleExpand = () => {\n    this.setState({\n      height: \"auto\",\n      collapseWidget: false,\n    });\n  };\n\n  handleReload = () => {\n    const { widgetType, updateWidgetData } = this.props;\n    const type = widgetType;\n    if (type) {\n      updateWidgetData(type);\n    }\n    this.setState({ reloading: true });\n    let endpoint = false;\n    if (!endpoint) {\n      setTimeout(() => this.setState({ reloading: false }), 2000);\n    } else {\n      this.setState({ reloading: true });\n      fetch(\"https://yourapi.com\")\n        .then((response) => response.json())\n        .then((json) => this.setState({ apiData: json.title }))\n        .then(setTimeout(() => this.setState({ reloading: false }), 1000));\n    }\n  };\n\n  handleFullscreen = () => {\n    this.setState({ fullscreened: !this.state.fullscreened });\n  };\n\n  render() {\n    const {\n      title,\n      className,\n      children,\n      close,\n      fullscreen,\n      collapse,\n      refresh,\n      settings,\n      settingsInverse,\n      tooltipPlacement,\n      showTooltip,\n      bodyClass,\n      customControls,\n      customClose,\n      customExpand,\n      customCollapse,\n      customFullscreen,\n      customReload,\n      fetchingData,\n      customDropDown,\n      customBody,\n      prompt,\n      collapsed,\n      widgetType,\n      updateWidgetData,\n      options, //eslint-disable-line\n      ...attributes\n    } = this.props;\n    const mainControls = !!(\n      close ||\n      fullscreen ||\n      collapse ||\n      refresh ||\n      settings ||\n      settingsInverse\n    );\n\n    const {\n      reloading,\n      fullscreened,\n      randomId,\n      height,\n      hideWidget,\n      collapseWidget,\n      modal,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <section\n          style={{ display: hideWidget ? \"none\" : \"\" }}\n          className={classNames(\n            \"widget\",\n            { fullscreened: !!fullscreened, collapsed: !!collapseWidget },\n            s.widget,\n            className,\n            reloading || fetchingData ? s.reloading : \"\"\n          )}\n          {...attributes}\n        >\n          {title &&\n            (typeof title === \"string\" ? (\n              <h5 className={s.title}>{title}</h5>\n            ) : (\n              <header className={s.title}>{title}</header>\n            ))}\n\n          {!customControls && mainControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {settings && (\n                <button>\n                  <i className=\"la la-cog\" />\n                </button>\n              )}\n              {settingsInverse && (\n                <button className={`bg-gray-transparent ${s.inverse}`}>\n                  <i className=\"la la-cog text-white\" />\n                </button>\n              )}\n              {refresh && (\n                <button onClick={this.handleReload} id={`reloadId-${randomId}`}>\n                  {typeof refresh === \"string\" ? (\n                    <strong className=\"text-gray-light\">{refresh}</strong>\n                  ) : (\n                    <i className=\"la la-refresh\" />\n                  )}\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`reloadId-${randomId}`}\n                    >\n                      Reload\n                    </UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {fullscreen && (\n                <button\n                  onClick={this.handleFullscreen}\n                  id={`fullscreenId-${randomId}`}\n                >\n                  <i\n                    className={`la la-${fullscreened ? \"compress\" : \"expand\"}`}\n                  />\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`fullscreenId-${randomId}`}\n                    >\n                      Fullscreen\n                    </UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {!fullscreened && collapse && (\n                <span>\n                  <button\n                    onClick={this.handleCollapse}\n                    id={`collapseId-${randomId}`}\n                  >\n                    <i\n                      className={`la la-angle-${\n                        !collapseWidget ? \"down\" : \"up\"\n                      }`}\n                    />\n                    {showTooltip && (\n                      <UncontrolledTooltip\n                        placement={tooltipPlacement}\n                        target={`collapseId-${randomId}`}\n                      >\n                        Collapse\n                      </UncontrolledTooltip>\n                    )}\n                  </button>\n                </span>\n              )}\n              {!fullscreened &&\n                (close && !prompt ? (\n                  <button onClick={this.handleClose} id={`closeId-${randomId}`}>\n                    {typeof close === \"string\" ? (\n                      <strong className=\"text-gray-light\">{close}</strong>\n                    ) : (\n                      <i className=\"la la-remove\" />\n                    )}\n                    {showTooltip && (\n                      <UncontrolledTooltip\n                        placement={tooltipPlacement}\n                        target={`closeId-${randomId}`}\n                      >\n                        Close\n                      </UncontrolledTooltip>\n                    )}\n                  </button>\n                ) : (\n                  <button onClick={this.toggleModal} id={`closeId-${randomId}`}>\n                    {typeof close === \"string\" ? (\n                      <strong className=\"text-gray-light\">{close}</strong>\n                    ) : (\n                      <i className=\"la la-remove\" />\n                    )}\n                    {showTooltip && (\n                      <UncontrolledTooltip\n                        placement={tooltipPlacement}\n                        target={`closeId-${randomId}`}\n                      >\n                        Modal\n                      </UncontrolledTooltip>\n                    )}\n                  </button>\n                ))}\n            </div>\n          )}\n          {customDropDown && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              <UncontrolledDropdown>\n                <DropdownToggle tag=\"span\" data-toggle=\"dropdown\">\n                  <i className=\"la la-cog\" />\n                </DropdownToggle>\n                <DropdownMenu className=\"bg-widget-transparent\" right>\n                  <DropdownItem onClick={this.handleReload} title=\"Reload\">\n                    Reload &nbsp;&nbsp;\n                    <span className=\"badge badge-pill badge-success animated bounceIn\">\n                      <strong>9</strong>\n                    </span>\n                  </DropdownItem>\n\n                  <DropdownItem\n                    onClick={this.handleFullscreen}\n                    title={!fullscreened ? \"Full Screen\" : \"Restore\"}\n                  >\n                    {!fullscreened ? \"Fullscreen\" : \"Restore\"}{\" \"}\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  {!fullscreened &&\n                    (!prompt ? (\n                      <DropdownItem onClick={this.handleClose} title=\"Close\">\n                        Close\n                      </DropdownItem>\n                    ) : (\n                      <DropdownItem onClick={this.toggleModal} title=\"Close\">\n                        Close\n                      </DropdownItem>\n                    ))}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </div>\n          )}\n          {customControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {!fullscreened &&\n                (customClose && !prompt ? (\n                  <button\n                    onClick={this.handleClose}\n                    id={`closeId-${randomId}`}\n                    className={s.customControlItem}\n                  >\n                    <i title=\"Close\" className=\"la la-times\" />\n                  </button>\n                ) : (\n                  <button\n                    onClick={this.toggleModal}\n                    id={`closeId-${randomId}`}\n                    className={s.customControlItem}\n                  >\n                    <i title=\"Close\" className=\"la la-times\" />\n                  </button>\n                ))}\n              {!fullscreened && customCollapse && (\n                <button\n                  onClick={this.handleCollapse}\n                  id={`closeId-${randomId}`}\n                  className={s.customControlItem}\n                >\n                  <i\n                    title=\"Collapse\"\n                    className={`la la-angle-${!collapseWidget ? \"down\" : \"up\"}`}\n                  />\n                </button>\n              )}\n              {customFullscreen && (\n                <button\n                  onClick={this.handleFullscreen}\n                  id={`closeId-${randomId}`}\n                  className={s.customControlItem}\n                >\n                  <i\n                    title=\"Fullscreen\"\n                    className={`la la-${fullscreened ? \"compress\" : \"expand\"}`}\n                  />\n                </button>\n              )}\n              {customReload && (\n                <button\n                  onClick={this.handleReload}\n                  id={`closeId-${randomId}`}\n                  className={s.customControlItem}\n                >\n                  <i title=\"I am spinning!\" className=\"la la-refresh\" />\n                </button>\n              )}\n            </div>\n          )}\n          <AnimateHeight duration={500} height={height}>\n            <div className={`${s.widgetBody} widget-body ${bodyClass}`}>\n              {reloading || fetchingData ? (\n                <Loader className={s.widgetLoader} size={40} />\n              ) : customBody ? (\n                <div className=\"jumbotron handle bg-inverse text-white mb-0\">\n                  <div className=\"container\">\n                    <h1>Draggable story!</h1>\n                    <p className=\"lead\">\n                      <em>Build</em> your own interfaces! Sit back and relax.\n                    </p>\n                    <p className=\"text-center\">\n                      <button\n                        onClick={this.handleFullscreen}\n                        className=\"btn btn-danger btn-lg\"\n                      >\n                        {!fullscreened ? (\n                          <React.Fragment>\n                            Fullscreen me! &nbsp;\n                            <i className=\"la la-check\" />\n                          </React.Fragment>\n                        ) : (\n                          \"Go Back\"\n                        )}\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                children\n              )}\n            </div>\n          </AnimateHeight>\n        </section>\n        {prompt && (\n          <Modal isOpen={modal} toggle={this.toggleModal} id=\"news-close-modal\">\n            <ModalHeader toggle={this.toggleModal} id=\"news-close-modal-label\">\n              Sure?\n            </ModalHeader>\n            <ModalBody className=\"bg-white\">\n              Do you really want to unrevertably remove this super news widget?\n            </ModalBody>\n            <ModalFooter>\n              <Button\n                color=\"default\"\n                onClick={this.toggleModal}\n                data-dismiss=\"modal\"\n              >\n                No\n              </Button>{\" \"}\n              <Button\n                color=\"danger\"\n                onClick={this.closeWithModal}\n                id=\"news-widget-remove\"\n              >\n                Yes, remove widget\n              </Button>\n            </ModalFooter>\n          </Modal>\n        )}\n        <div\n          style={{ display: fullscreened ? \"block\" : \"none\" }}\n          className={s.widgetBackground}\n        ></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Widget;\n"]},"metadata":{},"sourceType":"module"}